name: Release Builds

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (must already exist)"
        required: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  RELEASE_TAG: ${{ github.event_name == 'release' && github.event.release.tag_name || github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
  RELEASE_REF: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/{0}', github.event.inputs.tag) || github.ref }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python_version: "3.11"
            suffix: linux
            ffmpeg_platform: linux
            build_sdist: true
          - os: macos-latest
            python_version: "3.11"
            suffix: macos
            ffmpeg_platform: darwin
            build_sdist: false
          - os: windows-latest
            python_version: "3.11"
            suffix: windows
            ffmpeg_platform: win
            build_sdist: false

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_REF }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build pyinstaller yt-dlp ytmusicapi
          python -m pip install -e .

      - name: Fetch FFmpeg (Linux)
        if: ${{ matrix.ffmpeg_platform == 'linux' }}
        run: |
          mkdir -p resources/ffmpeg/linux
          curl -L -o ffmpeg.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg.tar.xz
          cp ffmpeg-*-amd64-static/ffmpeg resources/ffmpeg/linux/ffmpeg
          chmod +x resources/ffmpeg/linux/ffmpeg

      - name: Fetch FFmpeg (macOS)
        if: ${{ matrix.ffmpeg_platform == 'darwin' }}
        run: |
          mkdir -p resources/ffmpeg/darwin
          curl -L -o ffmpeg.zip https://evermeet.cx/ffmpeg/ffmpeg-6.1.1.zip
          unzip -o ffmpeg.zip ffmpeg -d resources/ffmpeg/darwin
          chmod +x resources/ffmpeg/darwin/ffmpeg

      - name: Fetch FFmpeg (Windows)
        if: ${{ matrix.ffmpeg_platform == 'win' }}
        shell: pwsh
        run: |
          $destDir = "resources/ffmpeg/windows"
          $destExe = Join-Path $destDir "ffmpeg.exe"
          if (Test-Path $destExe) {
            Write-Host "Using existing FFmpeg at $destExe"
            return
          }
          Write-Host "Downloading FFmpeg for Windows…"
          New-Item -ItemType Directory -Force -Path $destDir | Out-Null
          $primary = "https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl.zip"
          $fallback = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          $tmpZip = Join-Path $env:TEMP ("ffmpeg_" + [Guid]::NewGuid().ToString() + ".zip")
          $tmpDir = Join-Path $env:TEMP ("ffmpeg_unpack_" + [Guid]::NewGuid().ToString())
          try {
            try {
              Invoke-WebRequest -Uri $primary -OutFile $tmpZip -UseBasicParsing
            } catch {
              Write-Host "Primary FFmpeg download failed, trying fallback…"
              Invoke-WebRequest -Uri $fallback -OutFile $tmpZip -UseBasicParsing
            }
            Expand-Archive -Path $tmpZip -DestinationPath $tmpDir -Force
            $ffmpeg = Get-ChildItem -Path $tmpDir -Recurse -Filter "ffmpeg.exe" | Select-Object -First 1
            if (-not $ffmpeg) {
              throw "ffmpeg.exe not found in downloaded archive"
            }
            Copy-Item $ffmpeg.FullName $destExe -Force
          } finally {
            Remove-Item $tmpZip -Force -ErrorAction SilentlyContinue
            Remove-Item $tmpDir -Recurse -Force -ErrorAction SilentlyContinue
          }

      - name: Build source and wheel distributions
        if: ${{ matrix.build_sdist == true }}
        run: python -m build

      - name: Confirm PyInstaller spec file
        run: |
          if [ ! -f "CSVMusic.spec" ]; then
            echo "Unable to locate CSVMusic.spec" >&2
            echo "Repository contents:" >&2
            ls -al >&2
            exit 1
          fi

      - name: Build PyInstaller bundle
        run: pyinstaller CSVMusic.spec

      - name: Package PyInstaller bundle
        env:
          PACKAGE_SUFFIX: ${{ matrix.suffix }}
        run: |
          python - <<'PY'
          from __future__ import annotations
          import os
          import pathlib
          import zipfile
          import shutil

          suffix = os.environ["PACKAGE_SUFFIX"]
          dist_dir = pathlib.Path("dist")
          app_dir = dist_dir / "CSVMusic"
          if not app_dir.exists():
              single_candidates = [
                  dist_dir / "CSVMusic.exe",
                  dist_dir / "CSVMusic",
              ]
              for candidate in single_candidates:
                  if candidate.exists():
                      app_dir.mkdir(exist_ok=True)
                      shutil.copy2(candidate, app_dir / candidate.name)
                      break
              else:
                  raise SystemExit(
                      "Missing PyInstaller output: neither directory nor single-file bundle found"
                  )
          zip_path = dist_dir / f"CSVMusic-{suffix}.zip"
          with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
              zf.write(app_dir, app_dir.name + "/")
              for path in sorted(app_dir.rglob("*")):
                  if path.is_dir():
                      continue
                  arcname = app_dir.name + "/" + path.relative_to(app_dir).as_posix()
                  zf.write(path, arcname)
          PY

      - name: Collect PyInstaller bundle
        run: |
          mkdir -p release
          cp dist/CSVMusic-${{ matrix.suffix }}.zip release/

      - name: Collect Python distributions
        if: ${{ matrix.build_sdist == true }}
        run: |
          mkdir -p release
          cp dist/*.whl release/
          cp dist/*.tar.gz release/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.suffix }}
          path: release

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: |
            release/*.whl
            release/*.tar.gz
            release/*.zip
